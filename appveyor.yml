matrix:
  fast_finish: true

environment:

  global:
    PYTHON: "C:\\conda"
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci-helpers\\appveyor\\windows_sdk.cmd"
    PYTHON_ARCH: "64" # needs to be set for CMD_IN_ENV to succeed. If a mix
                      # of 32 bit and 64 bit builds are needed, move this
                      # to the matrix section.
    CONDA_DEPENDENCIES: "anaconda-client pillow pytest pytest-cov pyyaml qtawesome qtpy requests"
    CONDA_CHANNELS: "conda-forge spyder-ide"
    PIP_DEPENDENCIES_2: "coveralls pytest-qt"  # Fix when fixed upstream
    TEST_CI_APP: True

  matrix:
    - PYTHON_VERSION: "2.7"
      USE_QT_API: "QtPy4"
    - PYTHON_VERSION: "3.4"
      USE_QT_API: "QtPy4"
    - PYTHON_VERSION: "3.5"
      USE_QT_API: "QtPy4"
#    - PYTHON_VERSION: "2.7"
#      USE_QT_API: "QtPy5"
#    - PYTHON_VERSION: "3.4"
#      USE_QT_API: "QtPy5"
#    - PYTHON_VERSION: "3.5"
#      USE_QT_API: "QtPy5"

platform:
  -x64

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
#  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
#      https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
#      Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
#        throw "There are newer queued builds for this pull request, failing early." }
  # Astropy ci-helpers. See https://github.com/astropy/ci-helpers
  - "git clone git://github.com/astropy/ci-helpers.git"
  - "powershell ci-helpers/appveyor/install-miniconda.ps1"
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "activate test"
  # Install pip dependencies.
  - "%CMD_IN_ENV% pip install %PIP_DEPENDENCIES_2%"
  # Install the selected Qt version
  - if "%USE_QT_API%" == "QtPy4" conda install qt pyqt
  - if "%USE_QT_API%" == "QtPy5" conda install qt5 pyqt5
  - "%CMD_IN_ENV% python setup.py develop"

# Not a .NET project, we build in the install step instead
build: false

test_script:
  - "%CMD_IN_ENV% conda-manager"

#on_success:
#  - "%CMD_IN_ENV% coveralls"  # For now only report coveralls on Travis-CI

